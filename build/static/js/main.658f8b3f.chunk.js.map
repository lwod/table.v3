{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["socket","io","connect","App","useState","message","name","state","setState","chat","setChat","onTextChange","e","target","value","useEffect","on","className","onSubmit","preventDefault","emit","TextField","onChange","label","id","variant","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAAe,I,sCCOTA,EAASC,IAAGC,QAAQ,+BA0EXC,EAvEH,WAAO,IAAD,EAEUC,mBAAS,CAACC,QAAQ,GAAIC,KAAK,KAFrC,mBAETC,EAFS,KAEFC,EAFE,OAGQJ,mBAAS,IAHjB,mBAGTK,EAHS,KAGHC,EAHG,KAORC,EAAe,SAAAC,GACjBJ,EAAS,2BAAID,GAAL,kBAAaK,EAAEC,OAAOP,KAAOM,EAAEC,OAAOC,UAUlDC,qBAAU,WACNf,EAAOgB,GAAG,WAAW,YAAoB,IAAlBV,EAAiB,EAAjBA,KAAMD,EAAW,EAAXA,QACzBK,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAACH,OAAKD,oBAclC,OACE,sBAAKY,UAAU,MAAf,UACE,uBACIC,SA1BkB,SAACN,GACrBA,EAAEO,iBADyB,IAEpBb,EAAiBC,EAAjBD,KAAMD,EAAWE,EAAXF,QACbL,EAAOoB,KAAK,UAAW,CAACd,OAAKD,YAC7BG,EAAS,CAACH,QAAS,GAAGC,UAqBxB,UAGE,yCACA,qBAAKW,UAAW,aAAhB,SACE,cAACI,EAAA,EAAD,CACIf,KAAM,OACNgB,SAAU,SAAAV,GAAC,OAAED,EAAaC,IAC1BE,MAASP,EAAMD,KACfiB,MAAQ,WAId,qBAAKN,UAAW,UAAhB,SACE,cAACI,EAAA,EAAD,CACIf,KAAM,UACNgB,SAAU,SAAAV,GAAC,OAAED,EAAaC,IAC1BE,MAASP,EAAMF,QACfmB,GAAI,4BACJC,QAAS,WACTF,MAAQ,cAId,qDAGF,sBAAKN,UAAW,cAAhB,UACE,0CAvCOR,EAAKiB,KAAI,WAAoBC,GAApB,IAAGrB,EAAH,EAAGA,KAAMD,EAAT,EAASA,QAAT,OACZ,8BACI,+BACKC,EADL,KACY,+BAAOD,QAFbsB,aCxBPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.658f8b3f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, {useState, useEffect, useRef} from \"react\";\n\nimport io from 'socket.io-client'\nimport TextField from '@material-ui/core/TextField'\n\nconst socket = io.connect('https://lwod.herokuapp.com/')\n\n\nconst App = () => {\n  \n  const [state, setState] = useState({message:'', name:''})\n  const [chat, setChat] = useState([]);\n  \n  //const socketRef = useRef()\n  \n    const onTextChange = e =>{\n        setState({...state, [e.target.name]: e.target.value})\n    }\n    \n    const onMessageSubmit = (e) => {\n        e.preventDefault()\n        const {name, message} = state\n        socket.emit('message', {name,message})\n        setState({message: '',name})\n    }\n    \n    useEffect(()=>{\n        socket.on('message', ({name, message})=>{\n            setChat([...chat, {name,message}])\n        })\n    })\n    \n    const renderChat = () => {\n        return chat.map(({ name, message }, index) => (\n            <div key={index}>\n                <h3>\n                    {name}: <span>{message}</span>\n                </h3>\n            </div>\n        ))\n    }\n  \n  return (\n    <div className=\"App\">\n      <form\n          onSubmit={onMessageSubmit}\n      >\n        <h1>Message</h1>\n        <div className={'name-field'}>\n          <TextField\n              name={'name'}\n              onChange={e=>onTextChange(e)}\n              value = {state.name}\n              label = \"name\"\n          />\n        </div>\n  \n        <div className={'message'}>\n          <TextField\n              name={'message'}\n              onChange={e=>onTextChange(e)}\n              value = {state.message}\n              id={\"outlined-multiline-static\"}\n              variant={'outlined'}\n              label = \"message\"\n          />\n        </div>\n        \n        <button>Send Message</button>\n\n      </form>\n      <div className={'render-chat'}>\n        <h1>Chat Log</h1>\n        {renderChat()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}